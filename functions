#!/bin/zsh

# Pushes $1 to the stack
pushs() {
	local exploded_stack
	exploded_stack=( $1 ${(s/|/)SSTACK} )
	SSTACK=${(j/|/)exploded_stack}
}

# Pops from stack. If $1 is provided the head of the stack is assigned to the $1 echoed otherwise
pops() {
	local exploded_stack
	exploded_stack=( ${(s/|/)SSTACK} )

	[[ -z $1 ]] && echo $exploded_stack[1]
	[[ -n $1 ]] && eval $1"="$exploded_stack[1]

	[ $#exploded_stack != 0 ] && exploded_stack[1]=()
	SSTACK=${(j/|/)exploded_stack}
}

# Get the ${1}th element from the stack without changing the stack
gets() {
	local exploded_stack
	exploded_stack=( ${(s/|/)SSTACK} )
	echo $exploded_stack[$1]
}

# Returns the size of the stack
sizes() {
	local exploded_stack
	exploded_stack=( ${(s/|/)SSTACK} )
	echo $#exploded_stack
}

# Checks if the provided folder is enved. If no folder is provided checks the current folder
has_envrc() {
	[[ -n $checked_path ]] && checked_path=$1 || checked_path=$PWD

	[[ -f $checked_path/.envrc ]] && echo "yes" || echo "no"
}

# Assigns stdin to $1
pipeset() {
	local name=$1
	local value=$(cat -)
	eval $name"="$value
}

# Flushes the env
flushenv() {
	local vars var
	IFS=$'\n' vars=( $(env | awk -F '=' '{print $1}') )

	for var in $vars; do
		[[ -n $DEBUG ]] && echo $var
		case $var in
			PATH) ;;
			HOME) ;;
			SHELL) ;;
			PWD) ;;
			OLDPWD) ;;
			*)
				unset $var
			;;
		esac
	done
}

# Pushes the env on the stack
pushenv() {
	pushs $(env | base64 -)
}

# Pops the env from the stack
popenv() {
	local envs envar varname
	pops envs
	IFS=$'\n' envs=( $(echo $envs | base64 -D -) )

	for envar in $envs; do
		varname=$(echo $envar | awk -F '=' '{print $1}')
		[[ -n $DEBUG ]] && echo $varname
		case $varname in
			PATH) ;;
			HOME) ;;
			SHELL) ;;
			PWD) ;;
			OLDPWD) ;;
			*)
				export $envar
			;;
		esac
	done
}
